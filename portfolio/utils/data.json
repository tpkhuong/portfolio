{
  "projects": {
    "workflow": [
      "Every project starts the same way. Before we start coding, we go through the design of the web site with our pen and paper.",
      "Looking at mobile and desktop layout of every page of the web site and we build the structure of the web page. The HTML file.",
      "We break down each page into small sections then we break down each small sections into smaller components.",
      "When we are making our small components for each page, we are thinking of which HTML element is best for each components.",
      "Once we have a solid HTML structure of our web site and we decide the Tech Stack we want to use, we start coding.",
      "The coding process starts with building the project file structure.",
      "After the project file structure is complete, we start coding the structure of the web page, HTML code then the styles (CSS code) then function/behavior of the web site (JavaScript)."
    ],
    "sidebar": {
      "toc": [
        {
          "content": "Instructions",
          "typeOfTitle": "title",
          "tocHref": "instructions"
        },
        {
          "content": "Users should be able to",
          "typeOfTitle": "subtitle",
          "tocHref": "users-interactions"
        },
        {
          "content": "Process",
          "typeOfTitle": "title",
          "tocHref": "process"
        },
        {
          "content": "Build with / Tech Used",
          "typeOfTitle": "subtitle",
          "tocHref": "tech-used"
        },
        {
          "content": "Things we learned",
          "typeOfTitle": "subtitle",
          "tocHref": "things-learned"
        },
        {
          "content": "Features Added",
          "typeOfTitle": "subtitle",
          "tocHref": "features"
        },
        {
          "content": "Inclusion features Added",
          "typeOfTitle": "subtitle",
          "tocHref": "inclusion-features"
        }
      ]
    },
    "instructions": {
      "title": "_Instructions",
      "text": [
        "Use any tools you like to help you complete the challenge. Once you decide on the tools you want to build with, download the starter code.",
        "Set up the project with version control (e.g. Git). Read the README.md file and have a look around the project.",
        "Get colors, fonts etc from the style-guide.md file. Set up your project/file architecture however you want.",
        "Start Coding!!!"
      ],
      "hrefForToc": "instructions"
    },
    "first": {
      "title": "_FAQ Accordion Card",
      "sidebar": {
        "projectlinks": {
          "live": "https://tpkhuong.github.io/faq-accordion-card/",
          "code": "https://github.com/tpkhuong/faq-accordion-card"
        }
      },
      "main": {
        "intro": "The challenge is to build out this FAQ accordion card and get it looking as close to the design as possible.",
        "userable": {
          "title": "_Users should be able to",
          "text": [
            "View the optimal layout for the component depending on their device's screen size.",
            "See hover states for all interactive elements on the page.",
            "Hide/Show the answer to a question when the question is clicked.",
            "Bonus: Complete the challenge without using JavaScript."
          ],
          "hrefForToc": "users-interactions"
        },
        "process": {
          "title": "_Process",
          "text": [],
          "hrefForToc": "process"
        },
        "buildtech": {
          "title": "_Build with / Tech Used",
          "text": [
            "HTML and CSS.",
            "Decided to complete bonus challenge and make the accordion feature without using any JavaScript code."
          ],
          "hrefForToc": "tech-used"
        },
        "learned": {
          "title": "_Things we learned",
          "text": [
            "Without using any JavaScript to implement the accordion feature, we want a way to target the answer content/element when user click on a question.",
            "We solve this challenge by using the input with type 'radio' and label method.",
            "Our HTML structure, we want the element that contain the answer content to be a sibling of the input and label.",
            "Each faq/answer will have an input, label and span element(for the answer content).",
            "We used the pseudo-class selector :checked on the input type 'radio' and target the span element(answer content).",
            "When the 'radio' is not checked the span element will have a declaration of display: none.",
            "When the 'radio' is checked the span element containing the answer content will have a declaration of display: inline-block."
          ],
          "hrefForToc": "things-learned"
        },
        "features": {
          "title": "_Features Added",
          "text": [
            "Animation added to chevron up arrow and answer content container.",
            "Chevron Up arrow will rotate to down arrow position and answer will slowly appear when the question label is clicked."
          ],
          "hrefForToc": "features"
        },
        "inclusion": {
          "title": "_Inclusion features Added",
          "text": [
            "In order to make the accordin feature inclusive, we would use JavaScript.",
            "We would add aria-expanded and aria-controsl attribute to our button element.",
            "Use a selector in CSS that will target the answer to the FAQ questions.",
            "When user click on a button, we will change the aria-expaned attribute to 'true'.",
            "Based on our CSS our code will show the answer to the user."
          ],
          "hrefForToc": "inclusion-features"
        }
      },
      "images": [
        { "imgSrc": "/newbie/faq/desktop-design.jpg", "imgText": "image1" },
        { "imgSrc": "/newbie/faq/mobile-design.jpg", "imgText": "images2" },
        {
          "imgSrc": "/newbie/faq/previewImages/active-states.jpg",
          "imgText": "image3"
        }
      ]
    },
    "second": {
      "title": "_Intro component with Sign-up Form",
      "sidebar": {
        "projectlinks": {
          "live": "https://tpkhuong.github.io/intro-component-signup-form/",
          "code": "https://github.com/tpkhuong/intro-component-signup-form"
        }
      },
      "main": {
        "intro": "The challenge is to build out this landing page and get it looking as close to the design as possible.",
        "userable": {
          "title": "_Users should be able to",
          "text": [
            "View the optimal layout for the site depending on their device's screen size.",
            "See hover states for all interactive elements on the page.",
            "Receive an error message when the form is submitted if: Any input field is empty or The email address is not formatted correctly."
          ],
          "hrefForToc": "users-interactions"
        },
        "process": {
          "title": "_Process",
          "text": [
            "ATTN: Our algorithm will not submit the form to a backend when the call to action button is clicked.",
            "At the time of our learning journey, we were focused on improving our HTML, CSS, JavaScript and client-side form validations."
          ],
          "hrefForToc": "process"
        },
        "buildtech": {
          "title": "_Build with / Tech Used",
          "text": [
            "Mainly used HTML and CSS.",
            "Light JavaScript for client-side form validations."
          ],
          "hrefForToc": "tech-used"
        },
        "learned": {
          "title": "_Things we learned",
          "text": [
            "Client-side Validation.",
            "Using 'novalidate' attribute on form element and type='button' attribute on button in form will not reload page when user click on submit button.",
            "Checking input validation with each inputs validity.valid using JavsScript.",
            "Using Position layout on input container and error image element to place error image inside each inputs."
          ],
          "hrefForToc": "things-learned"
        },
        "features": {
          "title": "_Features Added",
          "text": ["Look at Inclusion features added."],
          "hrefForToc": "features"
        },
        "inclusion": {
          "title": "_Inclusion features Added",
          "text": [
            "We want to show our growth as a Web Inclusive Developer.",
            "At the time of building the Intro Component Form Application, we did not implement any inclusive features.",
            "With more experience of building Web Inclusive application.",
            "One inclusive feature we want to implement is we will add a User notification for the invalid inputs.",
            "When the input is invalid, our application will let the user know which inputs need their attention.",
            "The user will be able to tab through the list of invalid inputs and a link provide a way for the user to go the invalid input."
          ],
          "hrefForToc": "inclusion-features"
        }
      },
      "images": [
        {
          "imgSrc": "/newbie/introForm/desktop-design.jpg",
          "imgText": "images2"
        },
        {
          "imgSrc": "/newbie/introForm/mobile-design.jpg",
          "imgText": "image3"
        },
        {
          "imgSrc": "/newbie/introForm/previewImages/active-states.jpg",
          "imgText": "image1"
        }
      ]
    },
    "third": {
      "title": "_Crowdfunding Product Page",
      "sidebar": {
        "projectlinks": {
          "live": "https://someplacecool.io",
          "code": "https://github/projectURL.com"
        }
      },
      "main": {
        "intro": "The challenge is to build out this crowdfunding product page and get it looking as close to the design as possible.",
        "userable": {
          "title": "_Users should be able to",
          "text": [
            "View the optimal layout for the site depending on their device's screen size.",
            "See hover states for all interactive elements on the page.",
            "Make a selection of which pledge to make.",
            "See an updated progress bar and total money raised based on their pledge total after confirming a pledge.",
            "See the number of total backers increment by one after confirming a pledge.",
            "Toggle whether or not the product is bookmarked."
          ],
          "hrefForToc": "users-interactions"
        },
        "process": {
          "title": "_Process",
          "text": [
            "Note: Please know at the time we built the Crowdfunding pledge application, the application accepted one pledge.",
            "If we want the application to accept more than one pledge, we would use local storage to keep track of total amount pledge, total number of supporters and days left to reach total amount."
          ],
          "hrefForToc": "process"
        },
        "buildtech": {
          "title": "_Build with / Tech Used",
          "text": ["Mainly used HTML, CSS and vanilla JavaScript."],
          "hrefForToc": "tech-used"
        },
        "learned": {
          "title": "_Things we learned",
          "text": [
            "One of the fun challenges of building this application was the progress bar.",
            "One solution was we used CSS custom property and JavaScript .style.setProperty method.",
            "The method on .setProperty() found on the document.documentElement.style object allow us to control the width of the progress bar.",
            "When we update the CSS custom property by calling .setProperty(), we also update the width of progress bar element."
          ],
          "hrefForToc": "things-learned"
        },
        "features": {
          "title": "_Features Added",
          "text": ["Look at Inclusion features added."],
          "hrefForToc": "features"
        },
        "inclusion": {
          "title": "_Inclusion features Added",
          "text": [
            "Focus the button that activated each modal and place the focus on the reward selected for the reward modal.",
            "There are two modals for the Crowdfunding page.",
            "One modal is the reward/amount user want to pledge and the other is Thank you message modal.",
            "Once the user get to the Thank you message modal, when the user click on the 'Got it' button. Our algorithm will take the user back to the previous modal and placed focus on the button that activate the modal.",
            "One thing we would change is when the user click on 'Got it' button, our algorithm take the user initial product page."
          ],
          "hrefForToc": "inclusion-features"
        }
      },
      "images": [
        {
          "imgSrc": "/junior/crowdfunding/desktop-design.jpg",
          "imgText": "image1"
        },
        {
          "imgSrc": "/junior/crowdfunding/mobile-design.jpg",
          "imgText": "images2"
        },
        {
          "imgSrc": "/junior/crowdfunding/previewImages/desktop-design-modal-selected.jpg",
          "imgText": "image3"
        },
        {
          "imgSrc": "/junior/crowdfunding/previewImages/mobile-menu.jpg",
          "imgText": "image3"
        }
      ]
    },
    "fourth": {
      "title": "_Tip Calculator App",
      "sidebar": {
        "projectlinks": {
          "live": "https://someplacecool.io",
          "code": "https://github/projectURL.com"
        }
      },
      "main": {
        "intro": "The challenge is to build out this tip calculator app and get it looking as close to the design as possible.",
        "userable": {
          "title": "_Users should be able to",
          "text": [
            "View the optimal layout for the site depending on their device's screen size.",
            "See hover states for all interactive elements on the page",
            "Calculate the correct tip and total cost of the bill per person."
          ],
          "hrefForToc": "users-interactions"
        },
        "process": {
          "title": "_Process",
          "text": [
            "Had the most fun building the tip calculator app because it is the one application we can see our friends, family and self using it live."
          ],
          "hrefForToc": "process"
        },
        "buildtech": {
          "title": "_Build with / Tech Used",
          "text": ["Mainly used HTML, CSS and JavaScript."],
          "hrefForToc": "tech-used"
        },
        "learned": {
          "title": "_Things we learned",
          "text": [
            "One important concept of JavaScript we learned while building the tip calculator app is the usefulness of reusable functions.",
            "We taught ourselves to find a way to calculate the tip total based on different variables passed into our functions.",
            "Used CSS grid to built equal size buttons for the select tip percentage section of the application."
          ],
          "hrefForToc": "things-learned"
        },
        "features": {
          "title": "_Features Added",
          "text": [
            "Our algorithm will only calculate total amount and total tip amount for each person once bill amount, tip percentage, and number of people are entered."
          ],
          "hrefForToc": "features"
        },
        "inclusion": {
          "title": "_Inclusion features Added",
          "text": [
            "Add later:",
            "Implement a popup modal. It will only appears after the total and tip calculation is complete.",
            "The popup modal will let the user know the bill total, the selected tip percentage, total number of people, tip amount for each person and total amount for each person."
          ],
          "hrefForToc": "inclusion-features"
        }
      },
      "images": [
        {
          "imgSrc": "/junior/tipCalculator/desktop-design.jpg",
          "imgText": "image1"
        },
        {
          "imgSrc": "/junior/tipCalculator/mobile-design.jpg",
          "imgText": "images2"
        },
        {
          "imgSrc": "/junior/tipCalculator/previewImages/active-states.jpg",
          "imgText": "image3"
        }
      ]
    },
    "fifth": {
      "title": "_Interactive Pricing Component",
      "sidebar": {
        "projectlinks": {
          "live": "https://someplacecool.io",
          "code": "https://github/projectURL.com"
        }
      },
      "main": {
        "intro": "The challenge is to build out this interactive pricing component and get it looking as close to the design as possible.",
        "userable": {
          "title": "_Users should be able to",
          "text": [
            "View the optimal layout for the site depending on their device's screen size.",
            "See hover states for all interactive elements on the page.",
            "Use the slider and toggle to see prices for different page view numbers."
          ],
          "hrefForToc": "users-interactions"
        },
        "process": {
          "title": "_Process",
          "text": [],
          "hrefForToc": "process"
        },
        "buildtech": {
          "title": "_Build with / Tech Used",
          "text": ["Mainly used HTML, CSS and JavaScript."],
          "hrefForToc": "tech-used"
        },
        "learned": {
          "title": "_Things we learned",
          "text": [
            "The height of the child element will determine the height of the parent element.",
            "In order for the progress bar feature to work with a mouse and keyboard, all functions that move the progress bar left or right shared the same variable.",
            "The design of the progress bar uses a custom icon. In order to complete the challenge, we built our own slider component."
          ],
          "hrefForToc": "things-learned"
        },
        "features": {
          "title": "_Features Added",
          "text": [
            "Add animation to the toggle button, toggle between monthly and yearly billing."
          ],
          "hrefForToc": "features"
        },
        "inclusion": {
          "title": "_Inclusion features Added",
          "text": [
            "The user can move the slider using arrow keys(up, right, down, and left), page up, page down, home and end keys.",
            "Screen reader will read the percentage of the progress bar when it is moved.",
            "Add later: read out the pageviews and amount each month or year once the slider stopped moving for three seconds."
          ],
          "hrefForToc": "inclusion-features"
        }
      },
      "images": [
        {
          "imgSrc": "/junior/interactivePricing/desktop-design.jpg",
          "imgText": "image1"
        },
        {
          "imgSrc": "/junior/interactivePricing/mobile-design.jpg",
          "imgText": "images2"
        },
        {
          "imgSrc": "/junior/interactivePricing/previewImages/active-states.jpg",
          "imgText": "image3"
        }
      ]
    },
    "sixth": {
      "title": "_TODO App",
      "sidebar": {
        "projectlinks": {
          "live": "https://someplacecool.io",
          "code": "https://github/projectURL.com"
        }
      },
      "main": {
        "intro": "The challenge is to build out this todo app and get it looking as close to the design as possible.",
        "userable": {
          "title": "_Users should be able to",
          "text": [
            "View the optimal layout for the site depending on their device's screen size.",
            "See hover states for all interactive elements on the page",
            "Add new todos to the list.",
            "Mark todos as complete.",
            "Delete todos from the list.",
            "Filter by all/active/complete todos.",
            "Clear all completed todos.",
            "Toggle light and dark mode.",
            "Bonus: Drag and drop to reorder items on the list."
          ],
          "hrefForToc": "users-interactions"
        },
        "process": {
          "title": "_Process",
          "text": [],
          "hrefForToc": "process"
        },
        "buildtech": {
          "title": "_Build with / Tech Used",
          "text": ["Mainly used HTML, CSS and JavaScript."],
          "hrefForToc": "tech-used"
        },
        "learned": {
          "title": "_Things we learned",
          "text": [
            "The design asked us to not use the built HTML checked box inputs but build our own with a custom background and hover effect.",
            "We completed that challenge by changing the element background based to the attribute of the element or the element's parent.",
            "We used CSS custom properties to implement the dark and light theme toggle.",
            "The CSS custom properties declared on an element will be available to all its children.",
            "Using closure to keep track of the different arrays, status change of a Todo item from 'active' to 'complete' and when a Todo item is added or deleted.",
            "Better way to append a list of elements by using DocumentFragment.",
            "Instead of appending a list of elements to an existing DOM node individual. We use create a new element using DocumentFragment append the list of elements to the newly created node. Append the newly created DOM node with the list of elements as its children to a existing DOM node in our application.",
            "Screen reader will announce 'Todo' sounds like 'Toto', we added a space between 'To' and 'Do' making it 'To Do'.",
            "Move item at bottom of list to top of list and item at top of list to bottom of list based on which item 'top or bottom' has keyboard focused."
          ],
          "hrefForToc": "things-learned"
        },
        "features": {
          "title": "_Features Added",
          "text": [
            "Changing the order of items in either the 'Active' or 'Completed' list will update the order of items in the 'All' list.",
            "Drag and drop either 'Active' or 'Completed' item in 'All' tab, will update the order in either 'Active' or 'Completed' list based on the item selected.",
            "Keep track of Todo items left based on the item status either 'Complete' or 'Active'.",
            "Making the Drag and Drop feature work for both keyboard and mouse users."
          ],
          "hrefForToc": "features"
        },
        "inclusion": {
          "title": "_Inclusion features Added",
          "text": [
            "Button to annouce instructions for keyboard and screen reader users when that button is focused.",
            "When keyboard user hit 'enter' or 'space' key, our algorithm will let the user know which item is selected.",
            "Screen reader will let user know the updated order of list items once user select new position of item selected to be Drag and Drop."
          ],
          "hrefForToc": "inclusion-features"
        }
      },
      "images": [
        {
          "imgSrc": "/intermediate/todoApp/desktop-design.jpg",
          "imgText": "image1"
        },
        {
          "imgSrc": "/intermediate/todoApp/mobile-design.jpg",
          "imgText": "images2"
        },
        {
          "imgSrc": "/intermediate/todoApp/previewImages/active-states-dark.jpg",
          "imgText": "image3"
        }
      ]
    },
    "seventh": {
      "title": "_Rock Paper Scissors Game",
      "sidebar": {
        "projectlinks": {
          "live": "https://tpkhuong.github.io/rock-paper-scissors-game/",
          "code": "https://github.com/tpkhuong/rock-paper-scissors-game"
        }
      },
      "main": {
        "intro": "The challenge is to build out this Rock, Paper, Scissors game and get it looking as close to the design as possible.",
        "userable": {
          "title": "_Users should be able to",
          "text": [
            "View the optimal layout for the site depending on their device's screen size.",
            "Play Rock, Paper, Scissors against the computer.",
            "Maintain the state of the score after refreshing the browser (optional)."
          ],
          "hrefForToc": "users-interactions"
        },
        "process": {
          "title": "_Process",
          "text": ["First challenge building with React Js."],
          "hrefForToc": "process"
        },
        "buildtech": {
          "title": "_Build with / Tech Used",
          "text": [
            "HTML for the structure. CSS for the presentation. JavaScript and ReactJs for the main function of game."
          ],
          "hrefForToc": "tech-used"
        },
        "learned": {
          "title": "_Things we learned",
          "text": [
            "When react component renders or re-renders all its children component will render too.",
            "Update multiple state values executing useState only once by passing in an object as the value/argument when React.useState is executed. When we call the function that update state, we will pass in a function that returns an object.",
            "State management in React, 'state' or data of a component can be passed down to its children but not up to its parent. **** This is before we learned about context in ReactJs ***.",
            "Update attribute value of an element based on props passed to React component.",
            "Using clip-path to hide parts of an element.",
            "We can have more than one box-shadow on an element. Learned this concept when building the 'winner' rings indicator.",
            "React.useEffect runs after the component is rendered.",
            "When adding an event listener in React.useEffect, make sure to call remove event listener in the function returned when our algorithm execute React.useEffect."
          ],
          "hrefForToc": "things-learned"
        },
        "features": {
          "title": "_Features Added",
          "text": ["Focused indicator on selection buttons."],
          "hrefForToc": "features"
        },
        "inclusion": {
          "title": "_Inclusion features Added",
          "text": [
            "Added assistive texts to let keyboard and screen reader users know the function of the arrow keys.",
            "Hitting (left, up, left or down) arrow keys will loop through sign selections.",
            "Assistive texts to let the screen reader and keyboard users know the result of the game."
          ],
          "hrefForToc": "inclusion-features"
        }
      },
      "images": [
        {
          "imgSrc": "/advanced/rockGame/desktop-design.jpg",
          "imgText": "image1"
        },
        {
          "imgSrc": "/advanced/rockGame/mobile-design.jpg",
          "imgText": "images2"
        },
        {
          "imgSrc": "/advanced/rockGame/previewImages/desktop-rules-modal.jpg",
          "imgText": "image3"
        }
      ]
    },
    "eighth": {
      "title": "_Audiophile e-commerce website",
      "sidebar": {
        "projectlinks": {
          "live": "https://audiophile-ecommerce-website-fsnc.vercel.app/",
          "code": "https://github.com/tpkhuong/audiophile-ecommerce-website"
        }
      },
      "main": {
        "intro": "The challenge is to build out this multi-page e-commerce website and get it looking as close to the design as possible.",
        "userable": {
          "title": "_Users should be able to",
          "text": [
            "View the optimal layout for the site depending on their device's screen size.",
            "See hover states for all interactive elements on the page.",
            "Add/Remove products from the cart.",
            "Edit product quantities in the cart.",
            "Fill in all fields in the checkout.",
            "Receive form validations if fields are missed or incorrect during checkout.",
            "See correct checkout totals depending on the products in the cart: Shipping always adds $50 to the order. VAT is calculated as 20% of the product total, excluding shipping.",
            "See an order confirmation modal after checking out with an order summary.",
            "Bonus: Keep track of what's in the cart, even after refreshing the browser (localStorage could be used for this if you're not building out a full-stack app)."
          ],
          "hrefForToc": "users-interactions"
        },
        "process": {
          "title": "_Process",
          "text": ["Built a Full-Stack application."],
          "hrefForToc": "process"
        },
        "buildtech": {
          "title": "_Build with / Tech Used",
          "text": [
            "HTML, CSS, JavaScript and Reactjs for the frontend/client.",
            "JavaScript and NextJs for the backend/server.",
            "MongoDB for the database and NextAuth for user authentication."
          ],
          "hrefForToc": "tech-used"
        },
        "learned": {
          "title": "_Things we learned",
          "text": [
            "Users authentication and authorization.",
            "Created our own API.",
            "Working with a MongoDB(database).",
            "Implement authentication using username and password using NextAuth.",
            "Using React context to pass data from a child component to a parent component.",
            "Form validation on the client-side for keyboard and screen reader users."
          ],
          "hrefForToc": "things-learned"
        },
        "features": {
          "title": "_Features Added",
          "text": [
            "Go back button will take user to previous page.",
            "Register account and login button take user to register account page or login page.",
            "Cart item tracker near cart icon will indicate how many products are in the cart but not the cart's quantity.",
            "Client side and backend form validations.",
            "Data user enter to checkout form will persist in case user accidentally leaves our site.",
            "All Information user entered to checkout forms and cart will be removed when order is place.",
            "Added Billing Address information section for checkout page.",
            "Allow users to select when their Billing and Shipping address are the same or not for the checkout page.",
            "Selecting 'Yes' will link Billing Info inputs and Shipping Info inputs, entering data of a Billing Info inputs will update/fill input of Shipping Info and vice versa.",
            "After user has entered data for Billing Info inputs, selecting 'Yes' will auto-fill Shipping Info inputs.",
            "When Shipping Info inputs has data entered, selecting 'No' will remove all shipping info entered.",
            "Add Later: Clear All and Auto-Fill form button. Login using gmail or social media accounts."
          ],
          "hrefForToc": "features"
        },
        "inclusion": {
          "title": "_Inclusion features Added",
          "text": [
            "Client side validation for checkout, register and login page, letting keyboard and screen reader users know when their entered data is accepted or incorrect.",
            "Backend validation for checkout, register and login page, assistive text will let users know which inputs need their attention. Each assistive text will have a link that will take users to the inputs that need correcting."
          ],
          "hrefForToc": "inclusion-features"
        }
      },
      "images": [
        {
          "imgSrc": "/advanced/audiophile/desktop-design.jpg",
          "imgText": "image1"
        },
        {
          "imgSrc": "/advanced/audiophile/mobile-design.jpg",
          "imgText": "images2"
        },
        {
          "imgSrc": "/advanced/audiophile/previewImages/Desktop-Checkout.png",
          "imgText": "image3"
        }
      ]
    },
    "ninth": {
      "title": "_Arch Studio multi-page website",
      "sidebar": {
        "projectlinks": {
          "live": "https://someplacecool.io",
          "code": "https://github/projectURL.com"
        }
      },
      "main": {
        "intro": "The challenge is to build out this multi-page website and get it looking as close to the design as possible.",
        "userable": {
          "title": "_Users should be able to",
          "text": [
            "View the optimal layout for the site depending on their device's screen size.",
            "See hover states for all interactive elements on the page.",
            "Receive an error message when the contact form is submitted if: The Name, Email or Message fields are empty should show 'Can't be empty' and The Email is not formatted correctly should show 'Please use a valid email address'.",
            "Bonus: View actual locations on the contact page map (we recommend Leaflet JS for this)."
          ],
          "hrefForToc": "users-interactions"
        },
        "process": {
          "title": "_Process",
          "text": [
            "Choose this challenge because we wanted to improve our understanding of CSS."
          ],
          "hrefForToc": "process"
        },
        "buildtech": {
          "title": "_Build with / Tech Used",
          "text": [
            "Mainly used HTML, CSS, and JavaScript.",
            "Used JavaScript and ReactJs for the reusable components."
          ],
          "hrefForToc": "tech-used"
        },
        "learned": {
          "title": "_Things we learned",
          "text": [
            "Using React component build and style three different navigation menu: one in header, one in footer and one for mobile.",
            "Map location of company's offices.",
            "Stacking different elements(an image, title and text content) in one element.",
            "Apply style to element based on current page the user is on."
          ],
          "hrefForToc": "things-learned"
        },
        "features": {
          "title": "_Features Added",
          "text": ["Look at Inclusion features added."],
          "hrefForToc": "features"
        },
        "inclusion": {
          "title": "_Inclusion features Added",
          "text": [
            "Inclusive Image Carousel.",
            "Added later: play and pause feature for the image carousel. Previous and Next button to let user scroll through image carousel."
          ],
          "hrefForToc": "inclusion-features"
        }
      },
      "images": [
        { "imgSrc": "/advanced/arch/desktop-design.jpg", "imgText": "image1" },
        { "imgSrc": "/advanced/arch/mobile-design.jpg", "imgText": "images2" },
        {
          "imgSrc": "/advanced/arch/previewImages/Desktop-Home.png",
          "imgText": "image3"
        }
      ]
    }
  }
}
