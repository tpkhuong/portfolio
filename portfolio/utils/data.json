{
  "projects": {
    "workflow": [
      "Every project starts the same way. Before we start coding, we go through the design of the web site with our pen and paper.",
      "Looking at mobile and desktop layout of every page of the web site and we build the structure of the web page. The HTML file.",
      "We break down each page into small sections then we break down each small sections into smaller components.",
      "When we are making our small components for each page, we are thinking of which HTML element is best for each components.",
      "Once we have a solid HTML structure of our web site and we decide the Tech Stack we want to use, we start coding.",
      "The coding process starts with building the project file structure.",
      "After the project file structure is complete, we start coding the structure of the web page, HTML code then the styles (CSS code) then function/behavior of the web site (JavaScript)."
    ],
    "sidebar": {
      "toc": [
        {
          "content": "Instructions",
          "typeOfTitle": "title",
          "tocHref": "instructions"
        },
        {
          "content": "Users should be able to",
          "typeOfTitle": "subtitle",
          "tocHref": "users-interactions"
        },
        {
          "content": "Process",
          "typeOfTitle": "title",
          "tocHref": "process"
        },
        {
          "content": "Build with / Tech Used",
          "typeOfTitle": "subtitle",
          "tocHref": "tech-used"
        },
        {
          "content": "Things we learned",
          "typeOfTitle": "subtitle",
          "tocHref": "things-learned"
        },
        {
          "content": "Features Added",
          "typeOfTitle": "subtitle",
          "tocHref": "features"
        },
        {
          "content": "Inclusion features Added",
          "typeOfTitle": "subtitle",
          "tocHref": "inclusion-features"
        }
      ]
    },
    "instructions": {
      "title": "_Instructions",
      "text": [
        "Use any tools you like to help you complete the challenge. Once you decide on the tools you want to build with, download the starter code.",
        "Set up the project with version control (e.g. Git). Read the README.md file and have a look around the project.",
        "Get colors, fonts etc from the style-guide.md file. Set up your project/file architecture however you want.",
        "Start Coding!!!"
      ],
      "hrefForToc": "instructions"
    },
    "first": {
      "title": "_FAQ Accordion Card",
      "sidebar": {
        "projectlinks": {
          "live": "https://someplacecool.io",
          "code": "https://github/projectURL.com"
        }
      },
      "main": {
        "intro": "The challenge is to build out this FAQ accordion card and get it looking as close to the design as possible.",
        "userable": {
          "title": "_Users should be able to",
          "text": [
            "View the optimal layout for the component depending on their device's screen size.",
            "See hover states for all interactive elements on the page.",
            "Hide/Show the answer to a question when the question is clicked.",
            "Bonus: Complete the challenge without using JavaScript."
          ],
          "hrefForToc": "users-interactions"
        },
        "process": {
          "title": "_Process",
          "text": [
            "Hey! Just checked your website and it looks awesome! Also, I checked your articled on Medium. nice tips. Thanks! Duis aute irure dolor.",
            "Hey! Just checked your website and it looks awesome! Also, I checked your articled on Medium. nice tips. Thanks! Duis aute irure dolor. Hey! Just checked your website and it looks awesome! Also, I checked your articled on Medium. nice tips. Thanks! Duis aute irure dolor."
          ],
          "hrefForToc": "process"
        },
        "buildtech": {
          "title": "_Build with / Tech Used",
          "text": [
            "HTML and CSS",
            "Decided to complete bonus challenge and make the accordion feature without using any JavaScript code."
          ],
          "hrefForToc": "tech-used"
        },
        "learned": {
          "title": "_Things we learned",
          "text": [
            "Without using any JavaScript to implement the accordion feature, we want a way to target the answer content/element when user click on a question.",
            "We solve this challenge by using the input with type 'radio' and label method.",
            "Our HTML structure is, we want the element that contain the answer content to be a sibling of the input and label.",
            "Each faq/answer will have an input, label and span element(for the answer content).",
            "We used the pseudo-class selector :checked on the input type 'radio' and target the span element(answer content).",
            "When the 'radio' is not checked the span element will have a declaration of display: none.",
            "When the 'radio' is checked the span element containing the answer content will have a declaration of display: inline-block."
          ],
          "hrefForToc": "things-learned"
        },
        "features": {
          "title": "_Features Added",
          "text": [
            "Animation added to chevron up arrow and answer content container.",
            "Chevron Up arrow will rotate to down arrow position and answer will slowly appear when the question label is clicked."
          ],
          "hrefForToc": "features"
        },
        "inclusion": {
          "title": "_Inclusion features Added",
          "text": [
            "In order to make the accordin feature inclusive, we would use JavaScript.",
            "We would add aria-expanded and aria-controsl attribute to our button element.",
            "Use a selector in CSS that will target the answer to the FAQ questions.",
            "When user click on a button, we will change the aria-expaned attribute to 'true'.",
            "Based on our CSS our code will show the answer to the user."
          ],
          "hrefForToc": "inclusion-features"
        }
      },
      "images": [
        { "imgSrc": "/tipcalculator2.jpg", "imgText": "image1" },
        { "imgSrc": "/tipcalculator2.jpg", "imgText": "images2" },
        { "imgSrc": "/tipcalculator2.jpg", "imgText": "image3" },
        { "imgSrc": "/tipcalculator2.jpg", "imgText": "image4" }
      ]
    },
    "second": {
      "title": "_Intro component with Sign-up Form",
      "sidebar": {
        "projectlinks": {
          "live": "https://someplacecool.io",
          "code": "https://github/projectURL.com"
        }
      },
      "main": {
        "intro": "The challenge is to build out this landing page and get it looking as close to the design as possible.",
        "userable": {
          "title": "_Users should be able to",
          "text": [
            "View the optimal layout for the site depending on their device's screen size.",
            "See hover states for all interactive elements on the page",
            "Receive an error message when the form is submitted if: Any input field is empty or The email address is not formatted correctly."
          ],
          "hrefForToc": "users-interactions"
        },
        "process": {
          "title": "_Process",
          "text": [
            "Hey! Just checked your website and it looks awesome! Also, I checked your articled on Medium. nice tips. Thanks! Duis aute irure dolor.",
            "Hey! Just checked your website and it looks awesome! Also, I checked your articled on Medium. nice tips. Thanks! Duis aute irure dolor. Hey! Just checked your website and it looks awesome! Also, I checked your articled on Medium. nice tips. Thanks! Duis aute irure dolor."
          ],
          "hrefForToc": "process"
        },
        "buildtech": {
          "title": "_Build with / Tech Used",
          "text": [
            "Mainly used HTML and CSS",
            "Light JavaScript for client-side form validations."
          ],
          "hrefForToc": "tech-used"
        },
        "learned": {
          "title": "_Things we learned",
          "text": [
            "Client-side Validation.",
            "Using 'novalidate' attribute on form element will not reload page when user click on submit button.",
            "Checking input validation with each inputs validity.valid using JavsScript.",
            "Using Position layout on input container and error image element to place error image inside each inputs."
          ],
          "hrefForToc": "things-learned"
        },
        "features": {
          "title": "_Features Added",
          "text": ["Look at Inclusion features added."],
          "hrefForToc": "features"
        },
        "inclusion": {
          "title": "_Inclusion features Added",
          "text": [
            "Implemented User notification for the invalid inputs.",
            "When the input is invalid, our application will let the user know which inputs need their attention.",
            "The user will be able to tab through the list of invalid inputs and a link provide a way for the user to go the invalid input."
          ],
          "hrefForToc": "inclusion-features"
        }
      },
      "images": [
        { "imgSrc": "/tipcalculator2.jpg", "imgText": "image1" },
        { "imgSrc": "/tipcalculator2.jpg", "imgText": "images2" },
        { "imgSrc": "/tipcalculator2.jpg", "imgText": "image3" },
        { "imgSrc": "/tipcalculator2.jpg", "imgText": "image4" }
      ]
    },
    "third": {
      "title": "this is js"
    },
    "fourth": {
      "title": "this is html"
    },
    "fifth": {
      "title": "Los Angeles"
    }
  }
}
